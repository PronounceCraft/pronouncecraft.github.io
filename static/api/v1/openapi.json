{
  "openapi": "3.0.0",
  "info": {
    "title": "Kokoro Web API",
    "version": "0.0.0"
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/api/v1/audio/langs": {
      "get": {
        "summary": "List available languages",
        "tags": [
          "Speech"
        ],
        "responses": {
          "200": {
            "description": "List of available languages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Language ID"
                      },
                      "name": {
                        "type": "string",
                        "description": "Language name"
                      }
                    }
                  }
                },
                "example": [
                  {
                    "id": "en",
                    "name": "English"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/api/v1/audio/models": {
      "get": {
        "summary": "List available models",
        "tags": [
          "Speech"
        ],
        "responses": {
          "200": {
            "description": "List of available models",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Model ID"
                      },
                      "quantization": {
                        "type": "string",
                        "description": "Model quantization type"
                      },
                      "size": {
                        "type": "string",
                        "description": "Model size in MB"
                      }
                    }
                  }
                },
                "example": [
                  {
                    "id": "model",
                    "quantization": "fp32",
                    "size": "326 MB"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/api/v1/audio/speech": {
      "post": {
        "summary": "Generate audio from the input text",
        "description": "This endpoint is compatible with the OpenAI API.\n\nPython Example:\n\n    from pathlib import Path\n    from openai import OpenAI\n\n    client = OpenAI(\n        base_url=\"http://localhost:5173/api/v1\",\n        api_key=\"no-key\",\n    )\n\n    speech_file_path = Path(__file__).parent / \"speech.mp3\"\n    response = client.audio.speech.create(\n        model=\"model_q8f16\",\n        voice=\"af_heart\",\n        input=\"Today is a wonderful day to build something people love!\",\n    )\n\n    response.stream_to_file(speech_file_path)\n\nJavaScript Example:\n\n    import fs from \"fs\";\n    import path from \"path\";\n    import OpenAI from \"openai\";\n\n    const openai = new OpenAI({\n      baseURL: \"http://localhost:5173/api/v1\",\n      apiKey: \"no-key\",\n    });\n    const speechFile = path.resolve(\"./speech.mp3\");\n\n    const mp3 = await openai.audio.speech.create({\n      model: \"model_q8f16\",\n      voice: \"af_heart\",\n      input: \"Today is a wonderful day to build something people love!\",\n    });\n\n    const buffer = Buffer.from(await mp3.arrayBuffer());\n    await fs.promises.writeFile(speechFile, buffer);\n\nNote about the **voice** (*voice formula*) field:\n\n    • This field is used to specify a synthesis formula.\n    • It must follow the pattern: voice1*weight1 + voice2*weight2 + ... + voiceN*weightN.\n    • Voice IDs must be one of those returned by the voices endpoint.\n    • Each weight must be a number between 0 and 1, rounded to the nearest 0.1.\n    • If a single voice is provided without an asterisk, it is assumed to have weight 1.\n    • The language of the first voice in the formula is used for the phonemizer.\n",
        "tags": [
          "Speech"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "model": {
                    "type": "string",
                    "description": "Model to use for the synthesis"
                  },
                  "voice": {
                    "type": "string",
                    "description": "Voice formula to use for the synthesis"
                  },
                  "input": {
                    "type": "string",
                    "description": "Input text to synthesize"
                  },
                  "response_format": {
                    "type": "string",
                    "enum": [
                      "mp3",
                      "wav"
                    ],
                    "default": "mp3",
                    "description": "Response format, either `mp3` or `wav`"
                  },
                  "speed": {
                    "type": "number",
                    "minimum": 0.25,
                    "maximum": 5,
                    "default": 1,
                    "description": "Speed of the synthesis"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Audio file with the synthesized speech"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "example": {
                  "message": "Validation error ..."
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/audio/voices": {
      "get": {
        "summary": "List available voices",
        "tags": [
          "Speech"
        ],
        "responses": {
          "200": {
            "description": "List of available voices",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Voice ID"
                      },
                      "name": {
                        "type": "string",
                        "description": "Voice name"
                      },
                      "gender": {
                        "type": "string",
                        "description": "Voice gender"
                      },
                      "targetQuality": {
                        "type": "string",
                        "description": "Voice target quality"
                      },
                      "overallGrade": {
                        "type": "string",
                        "description": "Voice overall grade"
                      },
                      "lang": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Language ID"
                          },
                          "name": {
                            "type": "string",
                            "description": "Language name"
                          }
                        }
                      }
                    }
                  }
                },
                "example": [
                  {
                    "id": "af_heart",
                    "name": "Heart",
                    "gender": "Female",
                    "targetQuality": "A",
                    "overallGrade": "A",
                    "lang": {
                      "id": "en-us",
                      "name": "English (US)"
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/api/v1/text/phonemize": {
      "post": {
        "summary": "Generate text phonemes",
        "tags": [
          "Text"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "lang": {
                    "type": "string",
                    "description": "Language ID"
                  },
                  "input": {
                    "type": "string",
                    "description": "Input text to phonemize"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Phonemes of the input text",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "phonemes": {
                      "type": "string",
                      "description": "Phonemes of the input text"
                    }
                  }
                },
                "example": {
                  "phonemes": "..."
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "example": {
                  "message": "Validation error ..."
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": []
}